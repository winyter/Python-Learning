# 1、模块
- 一个模块就是一个包含python代码的文件，后缀名是.py即可，模块就是哥python文件
- 为什么使用模块
    - 程序太大，编写代码维护不方便，需要拆封
    - 模块可以增加代码重复利用的方式
    - 当作命名空间使用，避免重名
- 如何定义模块
    - 模块就是一个普通文件，所以任何代码可以直接书写
    - 不过根据模块命名的规范，最好在模块中编写如下内容
        - 函数（强调一个函数只实现单一功能）
        - 类（相似功能的组合，或者类似业务模块）
        - 测试代码
- 如何使用模块
    - 模块直接导入
        - 不建议使用数字作为模块名的开头，如果一定需要，那么需要借助importlib帮助
    - 语法
    
        import module_name
        module_name.function_name
        module_name.class_name
        
    - import <模块> as <别名>
        - 导入的同时给模块起一个别名
        - 其余用法与第一种相同
        
    - from module_name import func_name, class_name
        - 按上述语句有选择性的导入
        - 使用的时候可以直接使用导入的内容，不需要模块名作为前缀
    
    - from module_name import *
        - 导入模块所有内容
        
- if __name__ == "__main__"的使用
    - 可以有效避免模块代码被导入的时候被执行的问题
    - 建议所有程序的入口都加上这条语句
    
# 2、模块的搜索路径和存储
- 什么是模块的搜索路径
    - 加载模块的时候，系统会在哪些地方寻找此模块
- 系统默认的模块搜索路径
        
        import sys
        sys.path
- 添加搜索路径

        sys.path.append(dir)
- 模块加载顺序
    - 1、上次搜索内存中已经加载好的模块
    - 2、搜索python的内置模块
    - 3、搜索sys.path路径
    
    
# 3、包
- 包是一种组织管理代码的方式，包里面存放的是模块，可以理解为文件夹
- 用于将模块包含在一起的文件就是包
- 自定义包结构
    - 一个包内必须有一个：__init__.py文件
    
- 包的导入操作
    - import package_name
        - 直接导入一个包，可以使用__init.py中的内容，但是，在正常使用中，这个文件一般默认为空
        - 使用方式是：
                
                package_name.func_name
                package_name.class_name.func_name()
    - import package_name as p
        - 具体用法跟作用方式，跟上述模块的导入一样
        - 注意的是，此种方法是默认对__init__.py内容的导入
        
    - import package.module
        - 导入包中的某一个具体的模块
        - 使用方法
                
                package.module.func_name
                package.module.class.fun()
                package.module.class.var
                
    - import package.module as pm
    - from ... import 
        - from package import module
        - 此种导入方法不执行 __init__ 的内容
        
                from pkg01 import p01
                p01.sayHello()
        - from package import *
            - 导入当前包 __init__.py 文件中所有的函数和类，注意，这种导入方法只导入 __init__.py中的内容
            - 使用方法
            
                    func_name()
                    class_name.func_name()
                    class_name.var
                    
        - from package.module import *
            - 导入包中指定的模块的所有内容
            - 使用方法
                    
                    func_name()
                    class_name.func_name()
                    
    - 在开发环境中，经常会使用其他模块，可以在当前包中直接导入其他模块中的内容
        - import 完整的包或模块的路径（绝对路径）
    
- `__all__` 的用法
    - 在使用 from package import * 的时候，* 可以导入的内容
    - `__init__.py`中如果没有 `__all__`，那么只会把`__init__`中的内容导入
    - `__init__.py`中如果设置了`__all__`的值，那么则只导入`__all__`中指定的模块和包，不会载入`__init__`中的内容
    - 用法
    
            __all__=['module1', 'module2', 'package1', ......]
            
# 4、命名空间
- 用于区分不同位置不同功能但相同名称的函数或者变量的一个特定前缀
- 作用是防止命名冲突

        setName()
        Student.setName()
        Dog.setName()        